openapi: 3.0.3
info:
  title: Auth API
  version: v1
  description: Servicios de gestión de usuarios
tags:
  - name: Users
paths:
  /users:
    post:
      tags: [Users]
      summary: Crear usuario
      description: Crea un usuario y retorna su representación.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            examples:
              ok:
                value:
                  name: Juan
                  lastname: Pérez
                  email: juan.perez@example.com
                  identityDocument: "12345678"
                  phone: "3001234567"
                  roleId: 2
                  baseSalary: 1200000
                  birthdate: "2000-05-15"
                  address: "Cra 1 #23-45, Bogotá"
      responses:
        '201':
          description: Creado
          headers:
            Location:
              description: URL del recurso creado
              schema: { type: string, format: uri }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Datos inválidos / referencias inválidas (p.ej., roleId inexistente)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflicto (p.ej., email o documento duplicados)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                emailDuplicado:
                  value: { field: email, message: "ya se encuentra registrado", code: CONFLICT }
        '500':
          description: Error interno
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserRequest:
      type: object
      required: [name, lastname, email, identityDocument, phone, roleId, baseSalary, birthdate, address]
      properties:
        name:              { type: string, example: Juan }
        lastname:          { type: string, example: Pérez }
        email:             { type: string, format: email, example: juan.perez@example.com }
        identityDocument:  { type: string, example: "12345678" }
        phone:             { type: string, example: "3001234567", description: Solo dígitos, 7-15 }
        roleId:            { type: integer, format: int64, example: 2 }
        baseSalary:        { type: integer, format: int32, example: 1200000, minimum: 0, maximum: 1500000 }
        birthdate:         { type: string, format: date, example: "2000-05-15" }
        address:           { type: string, example: "Cra 1 #23-45, Bogotá" }

    UserResponse:
      type: object
      properties:
        id:                { type: integer, format: int64, example: 15 }
        name:              { type: string }
        lastname:          { type: string }
        email:             { type: string, format: email }
        identityDocument:  { type: string }
        phone:             { type: string }
        roleId:            { type: integer, format: int64 }
        baseSalary:        { type: integer, format: int32 }
        birthdate:         { type: string, format: date }
        address:           { type: string }

    ErrorResponse:
      type: object
      properties:
        field:   { type: string, example: email }
        message: { type: string, example: "ya se encuentra registrado" }
        code:    { type: string, example: CONFLICT }
